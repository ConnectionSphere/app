<%
#begin
  # store parameters in preferences
  fname = @login.user.preference('step3.fname', '', params[:fname])
  lname = @login.user.preference('step3.lname', '', params[:lname])
  email = @login.user.preference('step3.email', '', params[:email])
  passw = @login.user.preference('step3.passw', '', params[:passw])
  
  # parsing csv
  csv = @login.user.preference('step1.csv', '', nil)
  rows = csv.split("\n").map { |row| 
    row.split(',').map { |s| 
      s.strip 
    } 
  }.map { |row|
    {
      'name' => "#{row[0]} #{row[1]}",
      'datas' => {
        'email' => row[2],
        'type' => BlackStack::Leads::Data::TYPE_EMAIL,
      }
    }
  }
  rows.pop # remove last row with blank values

  subject = @login.user.preference('step2.subject', '', nil)
  body = @login.user.preference('step2.body', '', nil)

  fname = @login.user.preference('step3.fname', '', nil)
  lname = @login.user.preference('step3.lname', '', nil)
  email = @login.user.preference('step3.email', '', nil)
  passw = @login.user.preference('step3.passw', '', nil)

  # create address
  mta = BlackStack::Emails::Mta.new({
    :id_user => @login.user.id,

    :smtp_address => 'smtp.gmail.com',
    :smtp_port => 25,
    :smtp_username => email,
    :smtp_password => passw,
    
    :imap_address => 'imap.googlemail.com',
    :imap_port => 993,
    :imap_username => email,
    :imap_password => passw,

    :authentication => 'plain',
    :enable_starttls_auto => true,
    :openssl_verify_mode => OpenSSL::SSL::VERIFY_NONE,
    :inbox_label => 'Inbox',
    :spam_label => 'Spam',
    :search_all_wildcard => '*',
  })
  mta.save

  address = BlackStack::Emails::Address.new({
    :id_user => @login.user.id,
    :id_mta => mta.id,
    :type => BlackStack::Emails::Address::TYPE_GMAIL,
    :first_name => fname,
    :last_name => lname,
    :address => email,
    :password => passw,
    :enabled => true,
  })
  address.save

  # create tag
  tag = BlackStack::Emails::Tag.new
  tag.id = guid
  tag.create_time = now
  tag.id_user = @login.user.id
  tag.name = 'tag1'
  tag.save

  # add tag to address
  address_tag = BlackStack::Emails::AddressTag.new
  address_tag.id = guid
  address_tag.create_time = now
  address_tag.id_user = @login.user.id
  address_tag.id_address = address.id
  address_tag.id_tag = tag.id
  address_tag.save

  # create an export list
  export = BlackStack::Leads::Export.new
  export.id = guid
  export.id_user = @login.user.id
  export.create_time = now
  export.filename = 'export1'
  export.save

  # create leads
  leads = BlackStack::Leads::Lead.merge_many({'leads'=>rows})
  leads.each { |lead| lead.save }

  # add leads to the export list
  leads.each { |lead|
    export_lead = BlackStack::Leads::ExportLead.new
    export_lead.id = guid
    export_lead.create_time = now
    export_lead.id_user = @login.user.id
    export_lead.id_export = export.id
    export_lead.id_lead = lead.id
    export_lead.added_manually = true
    export_lead.save
    # release resource
    GC.start
    DB.disconnect
  }

  # create campaign
  campaign = BlackStack::Emails::Campaign.new
  campaign.id = guid
  campaign.id_user = @login.user.id
  campaign.create_time = now
  campaign.name = 'campaign1'
  campaign.id_export = export.id
  campaign.stat_replies = 0
  campaign.stat_positive_replies = 0
  campaign.stat_sents = 0
  campaign.stat_opens = 0
  campaign.stat_clicks = 0
  campaign.stat_bounces = 0
  campaign.stat_unsubscribes = 0
  campaign.stat_complaints = 0
  campaign.save
  
  # create outreach
  outreach = BlackStack::Emails::Outreach.new
  outreach.id = guid
  outreach.id_user = @login.user.id
  outreach.create_time = now
  outreach.id_campaign = campaign.id
  outreach.id_tag = tag.id
  outreach.save

  # create followup
  followup = BlackStack::Emails::Followup.new
  followup.id = guid
  followup.id_user = @login.user.id
  followup.create_time = now
  followup.name = 'followup1'
  followup.id_campaign = campaign.id
  # parameters
  followup.subject = subject
  followup.body = body
  followup.type = BlackStack::Emails::Followup::TYPE_HTML
  followup.status = BlackStack::Emails::Followup::STATUS_ON
  followup.sequence_number = 1
  followup.delay_days = 0
  followup.track_opens_enabled = true
  followup.track_clicks_enabled = true
  # stats
  followup.stat_replies = 0
  followup.stat_positive_replies = 0
  followup.stat_sents = 0
  followup.stat_opens = 0
  followup.stat_clicks = 0
  followup.stat_bounces = 0
  followup.stat_unsubscribes = 0
  followup.stat_complaints = 0
  # stats
  followup.stat_subject_spintax_variations = 0
  followup.stat_body_spintax_variations = 0
  # save
  followup.save

  # url to go after filter
  url = BlackStack::Funnel.url_after_login(@login, 'funnels.main')
  # go to done wizard
  redirect url
#rescue => e
#  redirect "/step3?err="+ CGI::escape(e.message)
#end
%>