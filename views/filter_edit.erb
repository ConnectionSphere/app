<%
sid = params['sid']
begin
    s = BlackStack::MicroData::Zi::Search.where(:id=>sid).first

    # getting the user preferences
    name = @login.user.preference("zi.new.name", '', params['name'])
    # filter - positive filter values
    positive_positions = @login.user.preference('zi.new.filter.positive.positions', '', params['positive_positions'])
    positive_locations = @login.user.preference('zi.new.filter.positive.locations', '', params['positive_locations'])
    positive_industries = @login.user.preference('zi.new.filter.positive.industries', '', params['positive_industries'])
    positive_revenues = @login.user.preference('zi.new.filter.positive.revenues', '', params['positive_revenues'])
    positive_headcounts = @login.user.preference('zi.new.filter.positive.headcounts', '', params['positive_headcounts'])
    positive_seniorities = @login.user.preference('zi.new.filter.positive.seniorities', '', params['positive_seniorities'])
    positive_sics = @login.user.preference('zi.new.filter.positive.sics', '', params['positive_sics'])
    positive_departments = @login.user.preference('zi.new.filter.positive.departments', '', params['positive_departments'])
    positive_keywords = @login.user.preference('zi.new.filter.positive.keywords', '', params['positive_keywords'])

    # filter - negative filter values
    negative_positions = @login.user.preference('zi.new.filter.negative.positions', '', params['negative_positions'])
    negative_locations = @login.user.preference('zi.new.filter.negative.locations', '', params['negative_locations'])
    negative_industries = @login.user.preference('zi.new.filter.negative.industries', '', params['negative_industries'])
    negative_revenues = @login.user.preference('zi.new.filter.negative.revenues', '', params['negative_revenues'])
    negative_headcounts = @login.user.preference('zi.new.filter.negative.headcounts', '', params['negative_headcounts'])
    negative_seniorities = @login.user.preference('zi.new.filter.negative.seniorities', '', params['negative_seniorities'])
    negative_sics = @login.user.preference('zi.new.filter.negative.sics', '', params['negative_sics'])
    negative_departments = @login.user.preference('zi.new.filter.negative.departments', '', params['negative_departments'])
    #negative_keywords = @login.user.preference('zi.new.filter.negative.keywords', '')

    # insights - personalization insights - premium feature
    insight_appending_enabled = @login.user.preference('zi.new.insight.appending_enabled', false, params['insight_appending_enabled'].to_s == 'on')
    
    insight_template = @login.user.preference("zi.new.insight.template", 0, params['insight_template'].to_i)
    insight_template = nil if insight_template == -1
    insight_source = @login.user.preference("zi.new.insight.source", BlackStack::MicroData::Zi::Search::SOURCE_COMPANY_WEBSITE_MAIN_PAGE, params['insight_source'].to_i)
    insight_requirement = @login.user.preference("zi.new.insight.requirement", BlackStack::MicroData::Zi::Search::REQUIREMENT_PERSONALIZE_SENTENCE_ABOUT_THE_COMPANY, params['insight_requirement'].to_i)
    insight_prompt1 = @login.user.preference("zi.new.insight.prompt1", '', params['insight_prompt1'])
    insight_prompt2 = @login.user.preference("zi.new.insight.prompt2", '', params['insight_prompt2'])
    insight_positive_response_pattern = @login.user.preference("zi.new.insight.positive_response_pattern", '', params['insight_positive_response_pattern'])
    insight_negative_response_pattern = @login.user.preference("zi.new.insight.negative_response_pattern", '', params['insight_negative_response_pattern'])

    # emails verification - premium feature
    verify_email = @login.user.preference('zi.new.verify.enabled', true, params['verify_email'].to_s == 'on')

    # stop limit
    stop_limit_enabled = @login.user.preference('zi.new.stop_limit.enabled', false, params['stop_limit_enabled'].to_s == 'on')
    stop_limit_value = @login.user.preference("zi.new.stop_limit.value", BlackStack::MicroData::Zi::Search::MAX_STOP_LIMIT, params['stop_limit_value'].to_i)

    # create the new search
    h = {}
    h['name'] = name
    h['status'] = s.status
    #h['credits'] = 50
    h['stop_limit'] = stop_limit_enabled ? stop_limit_value : BlackStack::MicroData::Zi::Search::MAX_STOP_LIMIT
    h['verify_email'] = verify_email
    h['job_titles'] = positive_positions.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => true } } + negative_positions.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => false } }
    h['states'] = positive_locations.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => true } } + negative_locations.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => false } }
    h['locations'] = positive_locations.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => true } } + negative_locations.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => false } }
    h['industries'] = positive_industries.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => true } } + negative_industries.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => false } }
    h['company_revenues'] = positive_revenues.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => true } } + negative_revenues.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => false } }
    h['company_headcounts'] = positive_headcounts.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => true } } + negative_headcounts.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => false } }
    h['seniorities'] = positive_seniorities.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => true } } + negative_seniorities.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => false } }
    h['sics'] = positive_sics.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => true } } + negative_sics.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => false } }
    h['departments'] = positive_departments.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => true } } + negative_departments.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x, 'positive' => false } }
    h['keywords'] = positive_keywords.split(';').map{|x| x.strip}.select{|x| x != ''}.map { |x| { 'value' => x } }

    i = { 'enabled' => insight_appending_enabled }
    t = BlackStack::MicroData::Insight::INSIGHT_TEMPLATES.select { |j| j[:code] == insight_template }.first
    if t
        i['template'] = t[:code]
        i['source'] = t[:source]
        i['requirement'] = t[:requirement]
        i['prompt1'] = t[:prompt1]
        i['prompt2'] = t[:prompt2]
        i['positive_response_pattern'] = t[:positive_response_pattern]
        i['negative_response_pattern'] = t[:negative_response_pattern]
    else
        i['template'] = nil
        i['source'] = insight_source
        i['requirement'] = insight_requirement
        i['prompt1'] = insight_prompt1
        i['prompt2'] = insight_prompt2
        i['positive_response_pattern'] = nil
        i['negative_response_pattern'] = BlackStack::MicroData::Insight::DEFAULT_NEGATIVE_RESPONSE_PATTERN
    end
    h['insight'] = i
    
    # create the search
    s = BlackStack::MicroData::Zi::Search.where(:id=>sid).first
    DB.transaction do # BEGIN
        s.parse(h)
        s.update_time = now
        s.save
    end # COMMIT

    # push the searches to micro.data
    # reference: https://github.com/FreeLeadsData/my.saas/issues/11
    #s.push

    # reease resources
    DB.disconnect
    GC.start

    # redirect to the wizard to create a campaign from this export list
    redirect "/edit/#{sid}?msg=#{CGI::escape("Search #{name} edited successfully.")}"
rescue => e
    # return errors
    redirect "/edit/#{sid}?err=#{CGI::escape(e.to_console[0..1000])}"
end
%>