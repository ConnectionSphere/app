<%
# load the i2p account
i2p = BlackStack::FreeLeadsData::Account.where(:id=>@login.user.id_account).first

# price per record
i2p.update_price_per_record
ppr = i2p.price_per_record.to_f

# getting the account of the user
account = BlackStack::MySaaS::Account.where(:id=>@login.user.id_account).first

# if it is for a new search or for edit an existing one
sid = params[:sid]
editing = !sid.nil?

if !editing
  # getting the user preferences
  name = @login.user.preference("zi.new.name", '')
  label = 'Create'
  title = 'New'
  filter = 'filter_new'
  s = nil
  h = nil

  # filter - positive filter values
  positive_positions = @login.user.preference('zi.new.filter.positive.positions', '')
  positive_locations = @login.user.preference('zi.new.filter.positive.locations', '')
  positive_industries = @login.user.preference('zi.new.filter.positive.industries', '')
  positive_revenues = @login.user.preference('zi.new.filter.positive.revenues', '')
  positive_headcounts = @login.user.preference('zi.new.filter.positive.headcounts', '')      
  positive_seniorities = @login.user.preference('zi.new.filter.positive.seniorities', '')
  positive_sics = @login.user.preference('zi.new.filter.positive.sics', '')
  positive_departments = @login.user.preference('zi.new.filter.positive.departments', '')
  positive_keywords = @login.user.preference('zi.new.filter.positive.keywords', '')

  # filter - negative filter values
  negative_positions = @login.user.preference('zi.new.filter.negative.positions', '')
  negative_locations = @login.user.preference('zi.new.filter.negative.locations', '')
  negative_industries = @login.user.preference('zi.new.filter.negative.industries', '')
  negative_revenues = @login.user.preference('zi.new.filter.negative.revenues', '')
  negative_headcounts = @login.user.preference('zi.new.filter.negative.headcounts', '')      
  negative_seniorities = @login.user.preference('zi.new.filter.negative.seniorities', '')
  negative_sics = @login.user.preference('zi.new.filter.negative.sics', '')
  negative_departments = @login.user.preference('zi.new.filter.negative.departments', '')
  #negative_keywords = @login.user.preference('zi.new.filter.negative.keywords', '')

  # insights - personalization insights - premium feature
  insight_appending_enabled = !i2p.premium? ? false : @login.user.preference('zi.new.insight.appending_enabled', false)
  insight_appending_enabled_checked = insight_appending_enabled ? 'checked' : ''
  insight_template = @login.user.preference("zi.new.insight.template", 0)
  insight_source = @login.user.preference("zi.new.insight.source", BlackStack::MicroData::Zi::Search::SOURCE_COMPANY_WEBSITE_MAIN_PAGE)
  insight_requirement = @login.user.preference("zi.new.insight.source", BlackStack::MicroData::Zi::Search::REQUIREMENT_PERSONALIZE_SENTENCE_ABOUT_THE_COMPANY)
  insight_prompt1 = @login.user.preference("zi.new.insight.prompt1", '')
  insight_prompt2 = @login.user.preference("zi.new.insight.prompt2", '')

  # emails verification - premium feature
  verify_email = !i2p.premium? ? false : @login.user.preference('zi.new.verify.enabled', true)
  verify_email_checked = verify_email ? 'checked' : ''

  # stop limit
  stop_limit_enabled = @login.user.preference('zi.new.stop_limit.enabled', false)
  stop_limit_enabled_checked = stop_limit_enabled ? 'checked' : ''
  stop_limit_value = @login.user.preference("zi.new.stop_limit.value", 1000)
else # if editing
  s = BlackStack::MicroData::Zi::Search.where(:id=>sid).first
  h = s.to_hash

  # getting the user preferences
  name = s.name
  label = 'Save'
  title = s.name
  filter = 'filter_edit'
  s = BlackStack::MicroData::Zi::Search.where(:id=>sid).first
  # filter - positive filter values
  positive_positions = s.search_job_titles.select { |o| o.positive == true }.map { |o| o.value }.join(';')
  positive_locations = s.search_states.select { |o| o.positive == true }.map { |o| o.value }.join(';')
  positive_industries = s.search_industries.select { |o| o.positive == true }.map { |o| o.value }.join(';')
  positive_revenues = s.search_company_revenues.select { |o| o.positive == true }.map { |o| o.value }.join(';')
  positive_headcounts = s.search_company_headcounts.select { |o| o.positive == true }.map { |o| o.value }.join(';')
  positive_seniorities = s.search_seniorities.select { |o| o.positive == true }.map { |o| o.value }.join(';')
  positive_sics = s.search_sics.select { |o| o.positive == true }.map { |o| o.value }.join(';')
  positive_departments = s.search_departments.select { |o| o.positive == true }.map { |o| o.value }.join(';')
  positive_keywords = s.search_keywords.map { |o| o.value }.join(';')

  # filter - negative filter values
  negative_positions = s.search_job_titles.select { |o| o.positive != true }.map { |o| o.value }.join(';')
  negative_locations = s.search_states.select { |o| o.positive != true }.map { |o| o.value }.join(';')
  negative_industries = s.search_industries.select { |o| o.positive != true }.map { |o| o.value }.join(';')
  negative_revenues = s.search_company_revenues.select { |o| o.positive != true }.map { |o| o.value }.join(';')
  negative_headcounts = s.search_company_headcounts.select { |o| o.positive != true }.map { |o| o.value }.join(';')
  negative_seniorities = s.search_seniorities.select { |o| o.positive != true }.map { |o| o.value }.join(';')
  negative_sics = s.search_sics.select { |o| o.positive != true }.map { |o| o.value }.join(';')
  negative_departments = s.search_departments.select { |o| o.positive != true }.map { |o| o.value }.join(';')
  #negative_keywords = @login.user.preference('zi.new.filter.negative.keywords', '')

  # insights - personalization insights - premium feature
  insight_appending_enabled = s.insight_enabled
  insight_appending_enabled_checked = insight_appending_enabled ? 'checked' : ''
  insight_template = s.insight_template
  insight_source = s.insight_source
  insight_requirement = nil #s.insight_requirement
  insight_prompt1 = s.insight_prompt1
  insight_prompt2 = s.insight_prompt2

  # emails verification - premium feature
  verify_email = s.verify_email == true
  verify_email_checked = verify_email ? 'checked' : ''

  # stop limit
  stop_limit_enabled = s.stop_limit.to_i < BlackStack::MicroData::Zi::Search::MAX_STOP_LIMIT
  stop_limit_enabled_checked = stop_limit_enabled ? 'checked' : ''
  stop_limit_value = stop_limit_enabled ? s.stop_limit.to_i : 1000
end
%>

<!-- NavBar -->
<div class="mynavbar mysticky">
	<section class="row-fluid">	
		<div class="span3">
		    <%=nav2("Searches", "/dashboard", title)%>
		</div>
    <div class='span9' style='text-align:right;'>
      <button type="submit" class='btn btn-blue create'><%=label%></button>
      <a class='btn btn-black' href='/dashboard'>Cancel</a>
      <%
      if editing
      %>
      <span> | </span>
      <a class='btn btn-blue' href='/new'><i class='icon-plus'></i> New</a>
      <a class='btn btn-blue' href='/filter_copy?id=<%=s.id%>'><i class="icon-copy"></i> Copy</a>
        <%
        if s.off?
        %>
        <a class='btn btn-green' href='/filter_play?ids=<%=s.id%>&redirect=edit/<%=s.id%>'><i class="icon-play"></i> Play</a>
        <%
        else # if s.off?
        %>
        <a class='btn btn-black' href='/filter_pause?ids=<%=s.id%>&redirect=edit/<%=s.id%>'><i class="icon-pause"></i> Pause</a>
        <%
        end # if s.off?
        %>
      <%
      end
      %>
      <%
      if editing
        %>
        <span> | </span>
        <span class='label label-<%=s.badge_color.to_s%>'><%=s.badge_text.to_s.encode_html%></span>
        <span> | </span>
        <span><b>LookUp:</b> <%=(100.to_f * s.earning_per_verified_email.to_f).round(2).to_label%>&cent;</span>
        <%
      end # if editing
      %>
    </div>
  </section>
</div>

<div style='position:fixed;right:0;width:350px;bottom:0;border:1px dashed gray;background:white;margin:5px;padding:5px;'>
  <div id='validation' name='validation'>
    Validating...
  </div>
  <div id='validation_buttons' name='validation_buttons' style='margin-top:5px;'>
    <button type="submit" class='btn btn-blue create'><%=label%></button>
    <a class='btn btn-black' href='/dashboard'>Cancel</a>
  </div>
</div>

<section class="row-fluid box">
    <div class="form-horizontal">
      <form action='/<%=filter%>' method='post' id='form' name='form'>
            <input type='hidden' id='sid' name='sid' value='<%=sid%>' />
            <div class="row-fluid">
              <div class='span6'>
                <div class="control-group">
                    <label class="control-label" for="name">Name</label>
                    <div class="controls">
                        <input type="text" id="name" name='name' class='input-block-level selected' placeholder="Write a descriptive name for your order." value='<%=name.to_s.encode_html%>' />
                    </div>
                </div>
              </div>
            </div>

            <h3>
              Filters
              <span style='font-size:14px' class='badge badge-blue' title='It has a cost of <%=(ppr.to_f*100.to_f).round(2).to_label%>&cent; per lookup.'></i> <%=(ppr.to_f*100.to_f).round(2).to_label%>&cent;</span>
            </h3>
            <p style='color:gray;'><i class='icon-info-sign'></i> Setup the parameters to find your leads.</p>

            <div class="row-fluid">
              <div class="control-group">
                    <input type="hidden" class="positive_positions" name="positive_positions" id='positive_positions' value="<%=positive_positions.to_s.encode_html%>" />
                    <input type="hidden" class="positive_locations" name="positive_locations" id='positive_locations' value="<%=positive_locations.to_s.encode_html%>" />
                    <input type="hidden" class="positive_industries" name="positive_industries" id='positive_industries' value="<%=positive_industries.to_s.encode_html%>" />
                    <input type="hidden" class="positive_revenues" name="positive_revenues" id='positive_revenues' value="<%=positive_revenues.to_s.encode_html%>" />
                    <input type="hidden" class="positive_headcounts" name="positive_headcounts" id='positive_headcounts' value="<%=positive_headcounts.to_s.encode_html%>" />
                    <input type="hidden" class="positive_seniorities" name="positive_seniorities" id='positive_seniorities' value="<%=positive_seniorities.to_s.encode_html%>" />
                    <input type="hidden" class="positive_sics" name="positive_sics" id='positive_sics' value="<%=positive_sics.to_s.encode_html%>" />
                    <input type="hidden" class="positive_departments" name="positive_departments" id='positive_departments' value="<%=positive_departments.to_s.encode_html%>" />
                    <input type="hidden" class="positive_keywords" name="positive_keywords" id='positive_keywords' value="<%=positive_keywords.to_s.encode_html%>" />
            
                    <input type="hidden" class="negative_positions" name="negative_positions" id='negative_positions' value="<%=negative_positions.to_s.encode_html%>" />
                    <input type="hidden" class="negative_locations" name="negative_locations" id='negative_locations' value="<%=negative_locations.to_s.encode_html%>" />
                    <input type="hidden" class="negative_industries" name="negative_industries" id='negative_industries' value="<%=negative_industries.to_s.encode_html%>" />
                    <input type="hidden" class="negative_revenues" name="negative_revenues" id='negative_revenues' value="<%=negative_revenues.to_s.encode_html%>" />
                    <input type="hidden" class="negative_headcounts" name="negative_headcounts" id='negative_headcounts' value="<%=negative_headcounts.to_s.encode_html%>" />
                    <input type="hidden" class="negative_seniorities" name="negative_seniorities" id='negative_seniorities' value="<%=negative_seniorities.to_s.encode_html%>" />
                    <input type="hidden" class="negative_sics" name="negative_sics" id='negative_sics' value="<%=negative_sics.to_s.encode_html%>" />
                    <input type="hidden" class="negative_departments" name="negative_departments" id='negative_departments' value="<%=negative_departments.to_s.encode_html%>" /> 
              </div>
            </div>            
      
            <div id='filters' name='filters'>
              <div class='row-fluid'>
                <div class='span6'>
                  <div id='positions'></div>
                </div>
                <div class='span6 box'>
                  <b>Job Title:</b> Job titles you want to include in your target.<br/>
                  Example: <span class='label label-blue'>CEO</span>, <span class='label label-blue'>Founder</span>.
                </div>
              </div>

              <div class='row-fluid'>
                <div class='span6'>
                  <div id='industries'></div>
                </div>
                <div class='span6 box'>
                  <b>Industry:</b> Niches of the company where he/she is working.<br/>
                  Example: <span class='label label-blue'>Financial Services</span>, <span class='label label-blue'>Restaurants</span>.
                </div>
              </div>

              <div class='row-fluid'>
                <div class='span6'>
                  <div id='revenues'></div>
                </div>
                <div class='span6 box'>
                  <b>Revenue:</b> Yearly revenue of the company.<br/>
                  Example: <span class='label label-blue'>From $5M to $15M</span>.
                </div>
              </div>

              <div class='row-fluid'>
                <div class='span6'>
                  <div id='headcounts'></div>
                </div>
                <div class='span6 box'>
                  <b>Headcount:</b> How many employees do the companies have.<br/>
                  Example: <span class='label label-blue'>1-10</span>, <span class='label label-blue'>11-50</span>.
                </div>
              </div>

              <div class='row-fluid'>
                <div class='span6'>
                  <div id='locations'></div>
                </div>
                <div class='span6 box'>
                  <b>Location:</b> Where the leads are living. Keep it in blank to target the whole USA.<br/>
                  Example: <span class='label label-blue'>Texas</span>, <span class='label label-blue'>Florida</span>.
                </div>
              </div>
              
              <div class='row-fluid'>
                <div class='span6'>
                  <div id='seniorities'></div>
                </div>
                <div class='span6 box'>
                  <b>Seniority:</b> Role of the lead in the company.<br/>
                  Example: <span class='label label-blue'>CXO</span>, <span class='label label-blue'>Manager</span>.
                </div>
              </div>

              <div class='row-fluid'>
                <div class='span6'>
                  <div id='sics'></div>
                </div>
                <div class='span6 box'>
                  <b>SIC:</b> SIC codes of the companies.<br/>
                  Example: <span class='label label-blue'>1010</span>, <span class='label label-blue'>8733</span>.
                </div>
              </div>

              <div class='row-fluid'>
                <div class='span6'>
                  <div id='departments'></div>
                </div>
                <div class='span6 box'>
                  <b>Department:</b> Where the lead is working at the company.<br/>
                  Example: <span class='label label-blue'>Administrative</span>, <span class='label label-blue'>Engineering</span>.
                </div>
              </div>

              <div class="row-fluid">              
                <div class='row-fluid'>
                  <div class='span6'>
                    <div id='keywords2'></div>
                  </div>
                  <div class='span6 box'>
                    <b>Keywords:</b> Words or Sentences in the Company website.<br/>
                    Example: <span class='label label-blue'>Job Openings</span>, <span class='label label-blue'>Our Mission</span>
                  </div>
                </div>
              </div> <!-- end of #filters -->

            </div>
            
            <br/>

            <div class="form-horizontal">
                <div class="row-fluid">
                  <div class='span6'>
                    <h3>
                      <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='checkbox' type='checkbox' value='on' id='verify_email' name='verify_email' <%=verify_email_checked%> <%=i2p.premium? ? '' : 'disabled'%>>
                      Verify Emails
                      <span style='font-size:14px' class='badge badge-blue' title='It is Free for Premium Accounts.'><i class='icon-gift'></i> Free</span>
                      <span style='font-size:14px' class='badge badge-green'><i class='icon-star' title='Requires a Premium Account.'></i> Premium</span>
                      <%
                      if !i2p.premium?
                      %>
                      <a href='/plans' target='_window' class='btn btn-small btn-link'>upgrade</a>
                      <%
                      end # if i2p.premium?
                      %>
                    </h3>
                    <p style='color:gray;'><i class='icon-info-sign'></i> Let us run email verification for you.</p>

                    <div class="form-horizontal" id='verification_div' name='verification_div' style='margin-left:25px;'>
                        <div class="row-fluid">
                            <h4>Choose Verification Provider <span class='badge badge-blue'>soon</span></h4>
                            <h4>
                              <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='radio' type='radio' id='verifier_bouncebuster' name='verifier' checked>
                              BounceBuster
                            </h4>
                            <h4>
                              <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='radio' type='radio' id='verifier_emaillistverify' name='verifier' disabled>
                              EmailListVerify <span class='badge badge-black'>not available yet</span>
                            </h4>
                            <h4>
                              <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='radio' type='radio' id='verifier_zerobounce' name='verifier' disabled>
                              ZeroBounce <span class='badge badge-black'>not available yet</span>
                            </h4>  
                            <br/>
                        </div>
                    </div>

                  </div>
                  <div class='span6 box'>
                    <b>Verify Emails:</b> On-demand emails verification.<br/><br/>Leads with no verified email won't be included into the download file.<br/>
                  </div>
                </div>
            </div>
            
            <div class="form-horizontal">
                <div class="row-fluid">
                  <div class='span6'>
                    <h3>
                      <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='checkbox' type='checkbox' value='on' id='stop_limit_enabled' name='stop_limit_enabled' <%=stop_limit_enabled_checked%>>
                      Stop Limit
                      <input type='number' style='height:22px;font-size:18px;margin-left:10px;margin-top:-5px;padding-top:-5px;' id="stop_limit_value" name="stop_limit_value" class='input input-small' value='<%=stop_limit_value.to_s%>'/>
                    </h3>
                  </div>
                  <div class='span6 box'>
                    <b>Stop Limit:</b> Request a small sample of results to see how your current parameters are working.<br/>
                  </div>
                </div>
            </div>       

            <h3>
              <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='checkbox' type='checkbox' value='on' id='insight_appending_enabled' name='insight_appending_enabled' <%=insight_appending_enabled_checked%> <%=i2p.premium? ? '' : 'disabled'%>>
              Personalization
              <span style='font-size:14px' class='badge badge-blue' title='Adds a cost of <%=(BlackStack::MicroData::Zi::Search::PRICE_PER_AI_APPENDING.to_f*100.to_f).round(0).to_label%>&cent; per lookup.'></i>+<%=(BlackStack::MicroData::Zi::Search::PRICE_PER_AI_APPENDING.to_f*100.to_f).round(0).to_label%>&cent;</span>
              <span style='font-size:14px' class='badge badge-green' title='Requires a Premium Account.'><i class='icon-star'></i> Premium</span>
              <%
              if !i2p.premium?
              %>
              <a href='/plans' target='_window' class='btn btn-small btn-link'>upgrade</a>
              <%
              end # if i2p.premium?
              %>
            </h3>

            <p style='color:gray;'><i class='icon-info-sign'></i> Websites scraping + AI to gather valuable insights about your leads. Use it in your outreach.</p>

            <div class="form-horizontal" id='insight_div' name='insight_div' style='margin-left:25px;'>
              <div class="row-fluid">
                <div class='span6'>
                  <%
                  BlackStack::MicroData::Zi::Search::INSIGHT_TEMPLATES.each { |t|
                  %>
                  <h4>
                    <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='radio insight_template' type='radio' id='insight_template_<%=t[:code]%>' value='<%=t[:code]%>' id='insight_template' name='insight_template' class='insight_template' <%=insight_template==t[:code] ? 'checked' : ''%> <%=i2p.premium? ? '' : 'disabled'%>>
                    <%=t[:name].encode_html%>
                  </h4>
                  <%
                  }
                  %>
                  <h4>
                    <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='radio insight_template' type='radio' id='insight_template_custom' value='-1' id='insight_template' name='insight_template' <%=insight_template.nil? ? 'checked' : ''%> <%=i2p.premium? ? '' : 'disabled'%>>
                    Custom GPT Prompts <span class='badge badge-orange'><i class='icon-info-sign'></i> Advanced</span>
                  </h4>
                </div> <!-- custom_insight_div -->
                
                <div class='span6 box'>
                  <b>AI Insights</b> 
                  <br/><br/>
                  Gather information you can use for personalize your email outreach or cold calling.
                  <br/><br/>
                  You can use <b>insights</b> for filtering better segmentation too.<br/>
                </div>
              </div>
  
              <div class="row-fluid">
                <div class="form-horizontal" id='custom_insight_div' name='custom_insight_div' style='margin-left:25px;'>
                  <div class='span6'>
                    <div class="control-group">
                        <label class="control-label" for="insight_source">Source</label>
                        <div class="controls">
                          <select id="insight_source" name="insight_source" class='input-block-level selected'>
                            <%
                            BlackStack::MicroData::Insight.insight_sources.each do |source|
                            %>
                            <option value="<%=source%>" <%=insight_source == source ? 'selected' : ''%>><%=BlackStack::MicroData::Insight.source_name(source).encode_html%></option>
                            <%
                            end
                            %>
                          </select>
                          <p style='color:gray;'><i class='icon-info-sign'></i> Where should we look for such an insight?</p>
                        </div>

                        <div id='show_prompt1'>
                          <label class="control-label" for="insight_prompt1"><i>Prompt 1</i></label>
                          <div class="controls">
                            <textarea id='insight_prompt1' name='insight_prompt1' style='width:100%;' rows=5><%=insight_prompt1.to_s.encode_html%></textarea>

                            <b>Negative Responses:</b> 
                            <%
                            BlackStack::MicroData::Insight::DEFAULT_NEGATIVE_RESPONSE_PATTERN.gsub('(','').gsub(')','').split('|').each { |n|
                            %>
                            <span class='label label-blue'><%=n%></span>
                            <%
                            } # BlackStack::MicroData::Insight::DEFAULT_NEGATIVE_RESPONSE_PATTERN.gsub('(','').gsub(')','').split('|').each { |n|
                            %><br/>
                            <i>Consider negative any response matching with the keywords above.</i>
                          </div>
                        </div>
                        
                        <br/>

                        <div class="control-group">
                          <label class="control-label" for="insight_requirement">Requirement</label>
                          <div class="controls">
                            <select id="insight_requirement" name="insight_requirement" class='input-block-level selected'>
                              <%
                              BlackStack::MicroData::Insight.insight_requirements.each do |requirement|
                              %>
                              <option value="<%=requirement%>" <%=insight_requirement == requirement ? 'selected' : ''%>><%=BlackStack::MicroData::Insight.requirement_name(requirement).encode_html%></option>
                              <%
                              end
                              %>
                            </select>
                            <p style='color:gray;'><i class='icon-info-sign'></i> What is the information to grab from that source?</p>
                          </div>

                          <label class="control-label" for="insight_prompt2"><i>Prompt 2</i></label>
                          <div class="controls">
                            <textarea id='insight_prompt2' name='insight_prompt2' style='width:100%;' rows=5><%=insight_prompt2.to_s.encode_html%></textarea>

                            <b>Negative Responses:</b> 
                            <%
                            BlackStack::MicroData::Insight::DEFAULT_NEGATIVE_RESPONSE_PATTERN.gsub('(','').gsub(')','').split('|').each { |n|
                            %>
                            <span class='label label-blue'><%=n%></span>
                            <%
                            } # BlackStack::MicroData::Insight::DEFAULT_NEGATIVE_RESPONSE_PATTERN.gsub('(','').gsub(')','').split('|').each { |n|
                            %><br/>
                            <i>Consider negative any response matching with the keywords above.</i>  
                          </div>
                        </div>
                    </div>
                  </div>

                  <div class='span6 box'>
                    <b>AI Insights</b> 
                    <br/><br/>
                    Gather information you can use for personalize your email outreach or cold calling.
                    <br/><br/>
                    You can use <b>insights</b> for filtering better segmentation too.<br/>
                  </div>
                </div>
              </div>
  
              <div class="row-fluid">
                  <div class='span6'>
                    <h4>Choose an AI Engine <span class='badge badge-blue'>soon</span></h4>
                    <h4>
                      <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='radio' type='radio' id='ai_gpt3_5' name='ai' checked <%=i2p.premium? ? '' : 'disabled'%>>
                      GPT-3.5
                    </h4>
                    <h4>
                      <input style='width:22px;height:22px;margin-top:-5px;padding-top:-5px;' class='radio' type='radio' id='ai_gpt4' name='ai' disabled>
                      GPT-4 <span class='badge badge-black'>not available yet</span>
                    </h4>
                  </div>
                    
                  <div class='span6 box'>
                    <b>Choose an AI Engine</b> <span class='badge badge-blue'>soon</span> 
                    <br/><br/>
                    <b>GPT-4</b> retrieves more accurante respones, and the rate of appended insights is higher too. 
                  </div>
              </div>
            </div>
            
            <div class='row-fluid' style='text-align:right;'>
              <br/>
              <div class="control-group">
                  <div class="controls">
                      <button type="submit" class="btn btn-large btn-blue create" id='create' name='create'><%=label%></button>
                      <a class='btn btn-large btn-black' href='/dashboard'>Cancel</a>
                    </div>
              </div>
            </div>

      </form>
    </div>
</section>

<script>
    var prompt1 = [];
    var show_prompt1 = [];

    var prompt2 = [];

    <%
    # build array of prompts for sources
    BlackStack::MicroData::Insight.insight_sources.each { |n|
      %>
      prompt1[<%=n%>] = '<%=BlackStack::MicroData::Insight.source_prompt1_template(n).to_s.encode_html%>';
      <%
    } 

    # build array of prompts for sources
    BlackStack::MicroData::Insight.insight_sources.each { |n|
      %>
      show_prompt1[<%=n%>] = <%=BlackStack::MicroData::Insight.source_prompt1_editable(n).to_s%>;
      <%
    } 

    # build array of prompts for requirements
    BlackStack::MicroData::Insight::insight_requirements.each { |n|
      %>
      prompt2[<%=n%>] = '<%=BlackStack::MicroData::Insight.source_prompt2_template(n).to_s.encode_html%>';
      <%
    }
    %>

    // show or hide #insight_div, depending on the selected checkbox #insight_appending_enabled
    function switch_insight_appending_enabled() {
        var insight_appending_enabled = $('#insight_appending_enabled').is(':checked');
        if (insight_appending_enabled) {
          $('#insight_div').show();
          // if the option #insight_template_custom is selected
          if ($('#insight_template_custom').is(':checked')) {
            $('#custom_insight_div').show();
          } else {
            $('#custom_insight_div').hide();
          }
        } else {
          $('#insight_div').hide();
          $('#custom_insight_div').hide();
        }
    }

    function switch_prompt1() {
      // get the value of the selected option
      var insight_source = $('#insight_source').val();
      // change to this template
      $("#insight_prompt1").val(prompt1[insight_source]);
      if ( show_prompt1[insight_source] ) {
        $("#show_prompt1").show();
      } else {
        $("#show_prompt1").hide();
      }
    }
    
    function switch_prompt2() {
      // get the value of the selected option
      var insight_requirement = $('#insight_requirement').val();
      // change to this template
      $("#insight_prompt2").val(prompt2[insight_requirement]);
    }

    // show or hide #verification_div, depending on the selected checkbox #verify_email
    function switch_verify_email() {
      var verify_email = $('#verify_email').is(':checked');
      if (verify_email) {
        $('#verification_div').show();
      } else {
        $('#verification_div').hide();
      }
    }

    // enable/disable #stop_limit_value depending on the selected checkbox #stop_limit_enabled
    function switch_stop_limit_enabled() {
        // get the selected option in the select tag #link_or_filters
        var stop_limit_enabled = $('#stop_limit_enabled').is(':checked');
        if (stop_limit_enabled) {
          $('#stop_limit_value').prop('disabled', false);
        } else {
          $('#stop_limit_value').prop('disabled', true);
        }
    } 

    // enable/disable the create button
    function enable_create_button() {
      // get the button
      var o = $('.create');
      var disabled = false;
      var msg = '';

      // if #name is empry, disable #creat and return
      if ($('#name').val().trim() == '') {
        disabled = true;
        msg += '<i class="icon-remove"></i> Please enter a Name.<br/>';
        $('#name').css('border-color', 'red');
      } else {
        $('#name').css('border-color', 'green');
      }

      // if #insight_appending_enabled is checked, them any radio-button .insight_template must be selected
      if ($('#insight_appending_enabled').is(':checked')) {
        if (!$('.insight_template').is(':checked')) {
          disabled = true;
          msg += '<i class="icon-remove"></i> Please select a Personalization Template.<br/>';
        }
      }      
      
      // if #insight_appending_enabled is checked and #insight_template_custom is selected:
      //  if prompt1 or prompt2 are not ready, disable .create and return.
      if ($('#insight_appending_enabled').is(':checked') && $('#insight_template_custom').is(':checked')) {
        if ($('#insight_prompt1').val().length == 0) {
          disabled = true;
          msg += '<i class="icon-remove"></i> Please complete the prompt1 for choosing the Insights Source.<br/>';
          $('#insight_source').css('border-color', 'red');
        } else {
          $('#insight_source').css('border-color', 'green');
        }
        if ($('#insight_prompt2').val().length == 0) {
          disabled = true;
          msg += '<i class="icon-remove"></i> Please complete the prompt2 for the Insights Requirement.<br/>';
          $('#insight_requirement').css('border-color', 'red');
        } else {
          $('#insight_requirement').css('border-color', 'green');
        }
      }

      // if #stop_limit_enabled is checked, and #stop_limit_value is empty, disable .create and return.
      if ($('#stop_limit_enabled').is(':checked') && $('#stop_limit_value').val().trim() == '') {
        disabled = true;
        msg += '<i class="icon-remove"></i> Please write a value for Stop Limit.<br/>';
        $('#stop_limit_value').css('border-color', 'red');
      } else {
        $('#stop_limit_value').css('border-color', 'green');
      }
      
      // if #stop_limit_enabled is checked, and #stop_limit_value is not higher than 0, disable .create and return.
      if ($('#stop_limit_enabled').is(':checked') && $('#stop_limit_value').val().trim() <= 0) {
        disabled = true;
        msg += '<i class="icon-remove"></i> The value for Stop Limit must be higher than 0.<br/>';
        $('#stop_limit_value').css('border-color', 'red');
      } else {
        $('#stop_limit_value').css('border-color', 'green');
      }

      // enable .create and return
      o.prop('disabled', disabled);
      if (disabled) {
        $('#validation').html(msg);
        $('#validation').css('border-color', 'red');
        $('#validation').css('color', 'red');
      } else {
        $('#validation').html('<i class="icon-ok"></i> Looks fine!');
        $('#validation').css('border-color', 'green');     
        $('#validation').css('color', 'green');      
      }
    }

    // update the hidden textfields with the values of the filters
    function update_hidden_fields() {
        i = 0;
        s = '';    
        filtersJs.getPositiveValues(keywords2).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.positive_keywords').val(s);

        i = 0;
        s = '';    
        filtersJs.getPositiveValues(positions).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.positive_positions').val(s);
    
        i = 0;
        s = '';
        filtersJs.getNegativeValues(positions).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.negative_positions').val(s);

        i = 0;
        s = '';
        filtersJs.getPositiveValues(industries).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.positive_industries').val(s);

        i = 0;
        s = '';
        filtersJs.getNegativeValues(industries).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.negative_industries').val(s);

        i = 0;
        s = '';
        filtersJs.getPositiveValues(locations).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.positive_locations').val(s);
    
        i = 0;
        s = '';
        filtersJs.getNegativeValues(locations).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.negative_locations').val(s);
    
        i = 0;
        s = '';
        filtersJs.getPositiveValues(revenues).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.positive_revenues').val(s);

        i = 0;
        s = '';
        filtersJs.getNegativeValues(revenues).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.negative_revenues').val(s);

        i = 0;
        s = '';
        filtersJs.getPositiveValues(headcounts).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.positive_headcounts').val(s);
    
        i = 0;
        s = '';
        filtersJs.getNegativeValues(headcounts).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.negative_headcounts').val(s);

        i = 0;
        s = '';
        filtersJs.getPositiveValues(seniorities).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.positive_seniorities').val(s);
    
        i = 0;
        s = '';
        filtersJs.getNegativeValues(seniorities).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.negative_seniorities').val(s);

        i = 0;
        s = '';
        filtersJs.getPositiveValues(sics).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.positive_sics').val(s);
    
        i = 0;
        s = '';
        filtersJs.getNegativeValues(sics).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.negative_sics').val(s);

        i = 0;
        s = '';
        filtersJs.getPositiveValues(departments).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.positive_departments').val(s);
    
        i = 0;
        s = '';
        filtersJs.getNegativeValues(departments).forEach(function(value) {
          if (i>0) { s += ';'; }
          s += value.trim();
          i++;
        });
        $('.negative_departments').val(s);

        // enable/disable the create button
        enable_create_button();

    } // function update_hidden_fields()

    $(document).ready(function() {
        // when edit #name
        $('#name').keyup(function() {
            // enable/disable the create button
            update_hidden_fields();
        });

        // when focus #name
        $('#name').focus(function() {
          // select all text inside
          $(this).select();
        });
        
        // show or hide #insight_div, depending on the selected checkbox #insight_appending_enabled
        switch_insight_appending_enabled();

        // show the templates chosen in the lists
        switch_prompt1();
        switch_prompt2();
        
        // when check or uncheck #insight_appending_enabled
        $('#insight_appending_enabled').change(function() {
            // show or hide #insight_div, depending on the selected checkbox #insight_appending_enabled
            switch_insight_appending_enabled();
            // enable/disable the create button
            update_hidden_fields();    
        });
        
        // when select one of the #insight_template options
        $('.insight_template').change(function() {
            // show or hide #insight_div, depending on the selected checkbox #insight_appending_enabled
            switch_insight_appending_enabled();
            // enable/disable the create button
            update_hidden_fields();
        });
                
        // when check or uncheck #verify_email
        $('#verify_email').change(function() {
          // show or hide #verification_div, depending on the selected checkbox #verify_email
          switch_verify_email();
          // enable/disable the create button
          update_hidden_fields();
        });

        // update the template in the prompt1, depending on the selected option in the select #insight_source
        $('#insight_source').change(function() {
            switch_prompt1();
            // enable/disable the create button
            update_hidden_fields();    
        });

        // update the template in the prompt2, depending on the selected option in the select #insight_requirement
        $('#insight_requirement').change(function() {
            switch_prompt2();
            // enable/disable the create button
            update_hidden_fields();    
        });
        
        // enable/disable #stop_limit_value, depending on the selected checkbox #stop_limit_enabled
        $('#stop_limit_enabled').change(function() {
            switch_stop_limit_enabled();
            // focus on the input #stop_limit_value
            $('#stop_limit_value').focus();
            // select all text in the input #stop_limit_value
            $('#stop_limit_value').select();
            // enable/disable the create button
            update_hidden_fields();    
        });

        // when edit #stop_limit_value
        $('#stop_limit_value').keyup(function() {
          // enable/disable the create button
          update_hidden_fields();    
        });

        // when edit #insight_prompt1
        $('#insight_prompt1').keyup(function() {
          // enable/disable the create button
          update_hidden_fields();
        });

        // when edit #insight_prompt2
        $('#insight_prompt2').keyup(function() {
          // enable/disable the create button
          update_hidden_fields();
        });

        // submit the form #form when clock on the button .create
        $('.create').click(function() {
            $('#form').submit();
        });

        // get the search parameters from the filterjs controls
        var positions = document.getElementById('positions');
        var industries = document.getElementById('industries');
        var locations = document.getElementById('locations');
        var revenues = document.getElementById('revenues');      
        var headcounts = document.getElementById('headcounts');      
        var seniorities = document.getElementById('seniorities');
        var sics = document.getElementById('sics');
        var departments = document.getElementById('departments');
        var keywords2 = document.getElementById('keywords2');

        filtersJs.draw(positions, {
          label: 'Job Title',
          allowed_positive_keywords: true, // default value: true
          allowed_negative_keywords: true, // default value: false
          // catch event: update hidden textfield when filter is changed    
          on_add_value: function (value) {
            update_hidden_fields();
          },
          // catch event: update hidden textfield when filter is changed    
          on_remove_value: function (value) {
            update_hidden_fields();
          },
        });
    
        filtersJs.draw(industries, {
          label: 'Industry',
          allowed_positive_keywords: true, // default value: true
          allowed_negative_keywords: true, // default value: false
          allowed_values: ['<%=BlackStack::MicroData::Zi::Industry.order(:value).all.map { |o| o.value.encode_html }.join("', '")%>'],      
          // catch event: update hidden textfield when filter is changed    
          on_add_value: function (value) {
            update_hidden_fields();
          },
          // catch event: update hidden textfield when filter is changed    
          on_remove_value: function (value) {
            update_hidden_fields();
          },
        });
    
        filtersJs.draw(revenues, {
            label: 'Revenue',
            allowed_positive_keywords: true, // default value: true
            allowed_negative_keywords: true, // default value: false
            allowed_values: ['<%=BlackStack::MicroData::Zi::CompanyRevenue.order(:value).all.map { |o| o.value.encode_html }.join("', '")%>'],      
            // catch event: update hidden textfield when filter is changed    
            on_add_value: function (value) {
              update_hidden_fields();
            },
            // catch event: update hidden textfield when filter is changed    
            on_remove_value: function (value) {
              update_hidden_fields();
            },
        });

        filtersJs.draw(headcounts, {
            label: 'Headcount',
            allowed_positive_keywords: true, // default value: true
            allowed_negative_keywords: true, // default value: false
            allowed_values: ['<%=BlackStack::MicroData::Zi::CompanyHeadcount.order(:value).all.map { |o| o.value.encode_html }.join("', '")%>'],      
            // catch event: update hidden textfield when filter is changed    
            on_add_value: function (value) {
              update_hidden_fields();
            },
            // catch event: update hidden textfield when filter is changed    
            on_remove_value: function (value) {
              update_hidden_fields();
            },
        });

        filtersJs.draw(locations, {
            label: 'Location',
            allowed_positive_keywords: true, // default value: true
            allowed_negative_keywords: true, // default value: false
            allowed_values: ['<%=BlackStack::MicroData::Zi::State.order(:value).all.map { |o| o.value.encode_html }.join("', '")%>'],      
            // catch event: update hidden textfield when filter is changed    
            on_add_value: function (value) {
              update_hidden_fields();
            },
            // catch event: update hidden textfield when filter is changed    
            on_remove_value: function (value) {
              update_hidden_fields();
            },
        });

        filtersJs.draw(seniorities, {
            label: 'Seniority',
            allowed_positive_keywords: true, // default value: true
            allowed_negative_keywords: true, // default value: false
            allowed_values: ['<%=BlackStack::MicroData::Zi::Seniority.order(:value).all.map { |o| o.value.encode_html }.join("', '")%>'],      
            // catch event: update hidden textfield when filter is changed    
            on_add_value: function (value) {
              update_hidden_fields();
            },
            // catch event: update hidden textfield when filter is changed    
            on_remove_value: function (value) {
              update_hidden_fields();
            },
        });

        filtersJs.draw(sics, {
            label: 'SIC Code',
            allowed_positive_keywords: true, // default value: true
            allowed_negative_keywords: true, // default value: false
            allowed_values: ['<%=BlackStack::MicroData::Zi::Sic.order(:value).all.map { |o| o.value.encode_html }.join("', '")%>'],      
            // catch event: update hidden textfield when filter is changed    
            on_add_value: function (value) {
              update_hidden_fields();
            },
            // catch event: update hidden textfield when filter is changed    
            on_remove_value: function (value) {
              update_hidden_fields();
            },
        });

        filtersJs.draw(departments, {
            label: 'Department',
            allowed_positive_keywords: true, // default value: true
            allowed_negative_keywords: true, // default value: false
            allowed_values: ['<%=BlackStack::MicroData::Zi::Department.order(:value).all.map { |o| o.value.encode_html }.join("', '")%>'],      
            // catch event: update hidden textfield when filter is changed    
            on_add_value: function (value) {
              update_hidden_fields();
            },
            // catch event: update hidden textfield when filter is changed    
            on_remove_value: function (value) {
              update_hidden_fields();
            },
        });

        // draw filters
        filtersJs.draw(keywords2, {
          label: 'Keywords',
          allowed_positive_keywords: true, // default value: true
          allowed_negative_keywords: false, // default value: false
          // catch event: update hidden textfield when filter is changed    
          on_add_value: function (value) {
            update_hidden_fields();
          },
          // catch event: update hidden textfield when filter is changed    
          on_remove_value: function (value) {
            update_hidden_fields();
          },
        });

        // set filter values
        <%
        positive_positions.split(';').each { |s|
          %>
          filtersJs.addValue(positions, '<%=s%>', true);
          <%
        }

        negative_positions.split(';').each { |s|
          %>
          filtersJs.addValue(positions, '<%=s%>', false);
          <%
        }

        positive_industries.split(';').each { |s|
          %>
          filtersJs.addValue(industries, '<%=s%>', true);
          <%
        }

        negative_industries.split(';').each { |s|
          %>
          filtersJs.addValue(industries, '<%=s%>', false);
          <%
        }

        positive_locations.split(';').each { |s|
          %>
          filtersJs.addValue(locations, '<%=s%>', true);
          <%
        }

        negative_locations.split(';').each { |s|
          %>
          filtersJs.addValue(locations, '<%=s%>', false);
          <%
        }

        positive_revenues.split(';').each { |s|
          %>
          filtersJs.addValue(revenues, '<%=s%>', true);
          <%
        }

        negative_revenues.split(';').each { |s|
          %>
          filtersJs.addValue(revenues, '<%=s%>', false);
          <%
        }

        positive_headcounts.split(';').each { |s|
          %>
          filtersJs.addValue(headcounts, '<%=s%>', true);
          <%
        }

        negative_headcounts.split(';').each { |s|
          %>
          filtersJs.addValue(headcounts, '<%=s%>', false);
          <%
        }

        positive_seniorities.split(';').each { |s|
          %>
          filtersJs.addValue(seniorities, '<%=s%>', true);
          <%
        }

        negative_seniorities.split(';').each { |s|
          %>
          filtersJs.addValue(seniorities, '<%=s%>', false);
          <%
        }

        positive_sics.split(';').each { |s|
          %>
          filtersJs.addValue(sics, '<%=s%>', true);
          <%
        }

        positive_sics.split(';').each { |s|
          %>
          filtersJs.addValue(sics, '<%=s%>', false);
          <%
        }

        positive_departments.split(';').each { |s|
          %>
          filtersJs.addValue(departments, '<%=s%>', true);
          <%
        }

        positive_departments.split(';').each { |s|
          %>
          filtersJs.addValue(departments, '<%=s%>', false);
          <%
        }

        positive_keywords.split(';').each { |s|
          %>
          filtersJs.addValue(keywords2, '<%=s%>', true);
          <%
        }
      %>

      // Using JavaScript to prevent or trigger form submission when pressing Enter key
      $(window).keydown(function(event){
        if(event.keyCode == 13) {
          event.preventDefault();
          return false;
        }
      });

      // update existing values of prompts
      $('#insight_prompt1').val('<%=insight_prompt1.to_s.encode_html%>');
      $('#insight_prompt2').val('<%=insight_prompt2.to_s.encode_html%>');

      // show or hide #verificaiton_div, depending on the selected checkbox #verify_email
      switch_verify_email();

      // enable/disable #stop_limit_value depending on the selected checkbox #stop_limit_enabled
      switch_stop_limit_enabled();
  
      // enable/disable the create button
      update_hidden_fields();
    });
</script>