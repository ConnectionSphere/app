<%
return_message = {}
begin
    h = @body['search']
    o = BlackStack::MicroData::Zi::Search.where(:id=>h['id']).first
    #a = BlackStack::FreeLeadsData::Account.where(:id=>o.id_account).first

    #raise 'Search not found' if o.nil?
    if o.nil?
        return_message['status'] = 'success'
        return return_message.to_json
        # release resources
        GC.start
        DB.disconnect
    end

    q = "UPDATE zi_search SET "

    # processing the 'report' section
    if h['stats']
        i = h['stats']
        q += "stat_tier1_scope = #{i['stat_tier1_scope'].to_i}, "
        q += "stat_tier2_scope = #{i['stat_tier2_scope'].to_i}, "
        q += "stat_tier3_scope = #{i['stat_tier3_scope'].to_i}, "
        q += "stat_tier4_scope = #{i['stat_tier4_scope'].to_i}, "
        q += "stat_tier5_scope = #{i['stat_tier5_scope'].to_i}, "
        q += "stat_processed_results = #{i['stat_processed_results'].to_i}, "
        q += "stat_verified_results = #{i['stat_verified_results'].to_i}, "
        q += "stat_progress = #{i['stat_progress'].to_f}, "
    end

    if h['economics']
        i = h['economics']
        q += "stat_earning = #{i['stat_earning'].to_f}, "
        q += "stat_cost = #{i['stat_cost'].to_f}, "
        q += "stat_profit = #{i['stat_profit'].to_f}, "
    end

    if h['report']
        i = h['report']
        q += "badge_color = '#{i['badge_color'].to_s.to_sql}', "
        q += "badge_text = '#{i['badge_text'].to_s.to_sql}', "
    end

    if h['export']
        i = h['export']
        q += "export_download_url = '#{i['export_download_url'].to_s.to_sql}', "
        q += "export_time = '#{i['export_time']}', " if !i['export_time'].to_s.empty?
    end

    q += "name='#{o.name.to_sql}' " # triviel update to use a last comma
    q += "WHERE id='#{o.id}'"
    
    DB.execute(q)

    # https://github.com/FreeLeadsData/micro.data/issues/33
    #
    s = BlackStack::MicroData::Zi::Search.select(:id, :status, :badge_color, :badge_text).where(:id=>o.id).first
    s.badge_color = 'green' if s.status == true && s.badge_color == 'black' 
    s.badge_text = 'on' if s.status == true && s.badge_text == 'off'
    s.save

    # update the timeline
    # https://github.com/FreeLeadsData/my.saas/issues/12
    h['timeline'].each { |i|
        n = DB["
            select count(*) as n
            from zi_timeline
            where id='#{i['id']}'
        "].first[:n]
        if n == 0
            DB.execute("
                INSERT INTO zi_timeline
                (id, year, month, day, hour, minute, id_search, stat_processed_results, stat_verified_results)
                VALUES
                (
                    '#{i['id']}', 
                    #{i['year'].to_i}, 
                    #{i['month'].to_i}, 
                    #{i['day'].to_i}, 
                    #{i['hour'].to_i}, 
                    #{i['minute'].to_i}, 
                    '#{i['id_search']}', 
                    #{i['stat_processed_results'].to_i}, 
                    #{i['stat_verified_results'].to_i}
                )
            ")
        else
            DB.execute("
                UPDATE zi_timeline SET
                stat_processed_results = #{i['stat_processed_results'].to_i},
                stat_verified_results = #{i['stat_verified_results'].to_i}
                WHERE id='#{i['id']}'
            ")
        end
        # release resources
        GC.start
        DB.disconnect
    }

    # return
    return_message['status'] = 'success'
rescue => e
    return_message['status'] = e.message
end
# release resources
GC.start
DB.disconnect
# return
return return_message.to_json
%>