<%
return_message = {}
begin
    return_message['searches'] = []

    filter = @body['filter'] || ''
    page = @body['page'].to_i || 1
    page_size = @body['page_size'].to_i || 25

    # validate: page is an integer greater than 0
    raise 'page must be an integer greater than 0' if page.to_i < 1

    # validate: page_size is an integer greater than 0 and lower than 51
    raise 'page_size must be an integer greater than 0 and lower than 51' if page_size.to_i < 1 || page_size.to_i > 50

    # bring the searches to return
    a = BlackStack::MicroData::Zi::Search.where(
        :id_account => @account.id,
        :delete_time => nil,
    ).where(
        Sequel.like(:name, "%#{filter.to_sql}%")
    ).limit(page_size, (page - 1) * page_size).all

    # build the array of searches
    a.each { |o| return_message['searches'] << o.to_hash(true) }

    # release resources
    DB.disconnect
    GC.start

    # return
    return_message['status'] = 'success'
rescue => e
    return_message['status'] = e.message
end
# release resources
GC.start
DB.disconnect

# return
return return_message.to_json
%>