<%
err = []
begin
    # load preferences
    name = @login.user.preference('emails.action.new.name', '', params[:name])
    trigger_type = @login.user.preference('emails.action.new.trigger_type', 0, params[:trigger_type].to_i)
    action_type = @login.user.preference('emails.action.new.action_type', 0, params[:action_type].to_i)
    apply_to_previous_events = @login.user.preference('emails.action.new.apply_to_previous_events', true, params[:apply_to_previous_events] == 'on')
    delay_minutes = @login.user.preference('emails.action.new.delay_minutes', 0, params[:delay_minutes].to_i)
    id_export = @login.user.preference('emails.action.new.id_export', '', params[:id_export])
    id_campaign = @login.user.preference('emails.action.new.id_campaign', '', params[:id_campaign])
    id_followup = @login.user.preference('emails.action.new.id_followup', '', params[:id_followup])
    #id_link = @login.user.preference('emails.action.new.id_link', '', params[:id_link]) # --> not developed yet
    
    # validate: name is mandatory
    err << 'Name is mandatory' if name.to_s.size == 0

    # if any error happened, return to the edition screen
    raise err.join("\n") if err.size > 0

    # create the action
    o = BlackStack::Emails::Action.new
    o.id = guid
    o.id_user = @login.user.id
    o.create_time = now
    o.name = name
    o.status = false
    o.trigger_type = trigger_type
    o.action_type = action_type
    o.apply_to_previous_events = apply_to_previous_events
    o.delay_minutes = delay_minutes
    o.id_export = id_export.to_s.empty? ? nil : id_export
    o.id_campaign = id_campaign.to_s.empty? ? nil : id_campaign
    o.id_followup = id_followup.to_s.empty? ? nil : id_followup
    #o.id_link = id_link # --> not developed yet
    o.save

    # return
    redirect "/emails/actions?msg="+ CGI::escape('Action created.')
rescue => e
    # return errors
    redirect "/emails/actions/new?err="+ CGI::escape(e.message)
end
%>