<%
#selected_positions = @login.user.preference('step1.positions', a.join(','), nil).split(/,/)
%>

<style>
table.wizard_table thead th {
    font-size:14pt;
    text-align:left;
	color: #555;
}

table.wizard_table tr td {
	vertical-align: top;
}

table.wizard_table tr td input:not([type=button]):not([type=reset]):not([type=submit]):not([type=image]) {
    font-size:14pt;
    text-align:left;
    border: 5px solid #ccc;
	margin:5px;
	padding:0px;
	height: 35px;
	border-radius: 10px;
	opacity: 0.5; 
}

table.wizard_table tr td input:not([type=button]):not([type=reset]):not([type=submit]):not([type=image]):hover {
	opacity: 1; 
}

table.wizard_table tr td input:not([type=button]):not([type=reset]):not([type=submit]):not([type=image]):focus {
	opacity: 1; 
}

table.wizard_table tr td input[type=button] {
    font-size:14pt;
    text-align:center;
    border: 5px solid red;
	font-size: 14pt;
	color: red;
	font-weight: bold;
	margin:5px;
	padding:0px;
	height: 45px;
	border-radius: 10px;
	opacity: 0.25;
}

table.wizard_table tr td input[type=button]:hover {
	opacity: 1; 
}

table.wizard_table tr td input[type=button]:focus {
	opacity: 1; 
}
</style>

<section class="step">
	<br/>
	<section class='row-fluid'>
		<h1><b>STEP 1:</b> Add Your Leads</h1>
	</section>
	<section class='row-fluid'>
		<h2>Add Your First Leads Here.</h2>
	</section>
	<br/>
	<form method='post' action='/filter_step1'>
	</form>
	<section class='row-fluid'>
		<div class='span6'>
			<div id='leads_table'></div>
		</div>
	</section>	
	<section class='row-fluid text-right'>
		<button class="btn btn-primary btn-large" id="step1-next" disabled>Next <i class="icon-long-arrow-right"></i></button>&nbsp;&nbsp;
		<p style='font-size:14px;padding-top:10px;'><span class='badge badge-green'><i class='icon-star'></i> Premium</span> <b>Need Custom Job Positions? <a href='/offer'>UPGRADE <i class="icon-long-arrow-right"></i></b></a></p>
	</section>
</section>

<script type="text/javascript" charset="utf-8">
	var ctx = document.getElementById('leads_table');

	$(document).ready(function() {
		// draw the table
		tablesJs.draw(ctx, {
			rows: 5,
			class: 'wizard_table', // Assign a custom value to the class atribute of the table.
			remove_row_button: true, // Add a "remove" button at the right side of each row. This is false by default.
			row_height: '50px', // This value will be added in the CSS heigh attribute of the row (tr).
			header: [
				{
					id: 'email',
					width: '400px', // This value will be added in the CSS width attribute of the column (th).
					text: 'Email Address', // Name of the column, in the header (th).
					type: 'text', // It can be 'text', 'number' or 'list'.
					placeholder: "write the lead's email here", // Placeholder attribute of the input field. It is null by default.
					value: '', // Inner text of the cell (th).
					select_all: true, // Select all text on focus. It is false by default. 
				}, {
					id: 'fname',
					width: '400px', // This value will be added in the CSS width attribute of the column (th).
					text: 'First Name', // Name of the column, in the header (th).
					type: 'text', // It can be 'text', 'number' or 'list'.
					placeholder: "write the lead's first name here", // Placeholder attribute of the input field. It is null by default.
					value: '', // Inner text of the cell (th).
					select_all: true, // Select all text on focus. It is false by default. 
				}, {
					id: 'lname',
					width: '400px', // This value will be added in the CSS width attribute of the column (th).
					text: 'Last Name', // Name of the column, in the header (th).
					type: 'text', // It can be 'text', 'number' or 'list'.
					placeholder: "write the lead's last name here", // Placeholder attribute of the input field. It is null by default.
					value: '', // Inner text of the cell (th).
					select_all: true, // Select all text on focus. It is false by default. 
				},
			],
			on_remove_row: function(rownum) {
				// trace log
				console.log('REMOVE');
				console.log('rownum: '+rownum);
				$('#myTableValues').val( 'REMOVE row ' + rownum.toString() );
			},
			on_edit_cell: function(rownum, colnum, value) {
				// trace log
				console.log('EDITION: '+value);
				console.log('rownum: '+rownum);
				console.log('colnum: '+colnum);
				$('#myTableValues').val( 'EDIT row ' + rownum.toString() + ' col ' + colnum.toString() + ' value ' + value.toString() );

				// if col is 0
				if (colnum == 0) {
					// if the value is a valid URL, set cell color green
					// add validation result to the texteare
					s = value ; //tablesJs.get_value(ctx, rownum, colnum); 
					if (validUrl(s)) {
						tablesJs.set_color(ctx, rownum, colnum, 'green');
						$('#myTableValues').val( $('#myTableValues').val() + ' - VALID URL');
					} else {
						tablesJs.set_color(ctx, rownum, colnum, 'red');
						$('#myTableValues').val( $('#myTableValues').val() + ' - INVALID URL');
					}
				}
			},
		});
		// enable feature to add rows
		$('.add').click(function () {
			// add a row
			tablesJs.add(ctx);
			// set focus on the first cell or the last row
			tablesJs.focus(ctx, tablesJs.count(ctx)-1, 0);
		});
		// set focus
		tablesJs.focus(ctx, 0, 0);
	});
</script>