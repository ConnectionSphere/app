<%
min_rows = 5
%>

<style>
table.wizard_table {
	width: 320px;
	max-width: 320px;
}

table.wizard_table thead th {
    font-size:14pt;
    text-align:left;
	color: #555;
}

table.wizard_table tr td {
	vertical-align: top;
}

table.wizard_table tr td input:not([type=button]):not([type=reset]):not([type=submit]):not([type=image]) {
    font-size:14pt;
    text-align:left;
    border: 5px solid #ccc;
	margin:5px;
	padding:0px;
	height: 35px;
	border-radius: 10px;
	opacity: 0.5; 
}

table.wizard_table tr td input:not([type=button]):not([type=reset]):not([type=submit]):not([type=image]):hover {
	opacity: 1; 
}

table.wizard_table tr td input:not([type=button]):not([type=reset]):not([type=submit]):not([type=image]):focus {
	opacity: 1; 
}

table.wizard_table tr td input[type=button] {
    font-size:14pt;
    text-align:center;
    border: 5px solid red;
	font-size: 14pt;
	color: red;
	font-weight: bold;
	margin:5px;
	padding:0px;
	height: 45px;
	border-radius: 10px;
	opacity: 0.25;
}

table.wizard_table tr td input[type=button]:hover {
	opacity: 1; 
}

table.wizard_table tr td input[type=button]:focus {
	opacity: 1; 
}


span.wizard-error {
	color:red;
	font-size:14pt;
}
</style>

<section class="step">
	<br/>
	<section class='row-fluid'>
		<h1><b>STEP 1:</b> Add Your Leads</h1>
	</section>
	<section class='row-fluid'>
		<h2>Add Your First Leads Here. <span id='err' name='err' class='wizard-error'></span></h2>
	</section>
	<br/>
	<form method='post' action='/filter_step1'>
	</form>
	<section class='row-fluid'>
		<div class='span6'>
			<div id='leads_table'></div>
		</div>
		<div class='span6'>
			lalala
		</div>
	</section>	
	<section class='row-fluid text-right'>
		<button class='btn btn-large btn-link' id='add'>Add Row</button>
		<button class="btn btn-primary btn-large" id="step1-next" disabled>Next <i class="icon-long-arrow-right"></i></button>&nbsp;&nbsp;
		<p style='font-size:14px;padding-top:10px;'><span class='badge badge-green'><i class='icon-star'></i> Premium</span> <b>Need Custom Job Positions? <a href='/offer'>UPGRADE <i class="icon-long-arrow-right"></i></b></a></p>
	</section>
</section>

<script type="text/javascript" charset="utf-8">
	var ctx = document.getElementById('leads_table');

	// function to validate email address
	function validEmail(s) {
		var re = /\S+@\S+\.\S+/;
		return re.test(s);
	}

	// function to validate cells
	function validateCells() {
		let r = 0;
		let n = tablesJs.count(ctx);
		let b = true; // errors found
		let err = ''; // error message

		// validate there are <%=min_rows%> rows as minimum
		if (n <= <%=min_rows%>) { 
			b=false; 
			err += 'You must add at least <%=min_rows%> leads.';
		}

		while (r<n) {
			// get value
			email = tablesJs.get_value(ctx, r, 0);
			fname = tablesJs.get_value(ctx, r, 1);
			lname = tablesJs.get_value(ctx, r, 2);

			// if email is not empty, validate it
			if (email.length > 0) { 
				if (!validEmail(email)) { 
					b = false; 
					tablesJs.set_color(ctx,r,0,'red') 
				} else {
					tablesJs.set_color(ctx,r,0,'green') 
				}
			} else {
				tablesJs.set_color(ctx,r,0,'') 
				// if field is empty, and it is not the last row, show error
				if (r < n-1) { b = false; }
			}

			// if fname is not empty, validate it
			if (fname.length > 0) {
				tablesJs.set_color(ctx,r,1,'green') 
			} else {
				tablesJs.set_color(ctx,r,1,'') 
				// if field is empty, and it is not the last row, show error
				if (r < n-1) { b = false; }
			}

			// if lname is not empty, validate it
			if (lname.length > 0) {
				tablesJs.set_color(ctx,r,2,'green') 
			} else {
				tablesJs.set_color(ctx,r,2,'') 
				// if field is empty, and it is not the last row, show error
				if (r < n-1) { b = false; }
			}

			// if it is the last row, and all fields have a value, then add a field
			if (r == n-1) { 
				if (email.length>0 && fname.length>0 && lname.length>0) {
					tablesJs.add(ctx);
				}
			}


			r++;
		}

		// show error message
		if (err.length > 0) { 
			$('#err').text(err); 
		} else {
			$('#err').text(''); 
		}

		// enable/disable next button
		if (b) {
			$('#step1-next').removeAttr('disabled');
		} else {
			$('#step1-next').attr('disabled', 'disabled');
		}

		// return result
		return b;
	}

	$(document).ready(function() {
		// draw the table
		tablesJs.draw(ctx, {
			rows: <%=(min_rows+1)%>,
			class: 'wizard_table', // Assign a custom value to the class atribute of the table.
			remove_row_button: true, // Add a "remove" button at the right side of each row. This is false by default.
			row_height: '50px', // This value will be added in the CSS heigh attribute of the row (tr).
			header: [
				{
					id: 'email',
					width: '400px', // This value will be added in the CSS width attribute of the column (th).
					text: 'Email Address', // Name of the column, in the header (th).
					type: 'text', // It can be 'text', 'number' or 'list'.
					placeholder: "write the lead's email here", // Placeholder attribute of the input field. It is null by default.
					value: '', // Inner text of the cell (th).
					select_all: true, // Select all text on focus. It is false by default. 
				}, {
					id: 'fname',
					width: '400px', // This value will be added in the CSS width attribute of the column (th).
					text: 'First Name', // Name of the column, in the header (th).
					type: 'text', // It can be 'text', 'number' or 'list'.
					placeholder: "write the lead's first name here", // Placeholder attribute of the input field. It is null by default.
					value: '', // Inner text of the cell (th).
					select_all: true, // Select all text on focus. It is false by default. 
				}, {
					id: 'lname',
					width: '400px', // This value will be added in the CSS width attribute of the column (th).
					text: 'Last Name', // Name of the column, in the header (th).
					type: 'text', // It can be 'text', 'number' or 'list'.
					placeholder: "write the lead's last name here", // Placeholder attribute of the input field. It is null by default.
					value: '', // Inner text of the cell (th).
					select_all: true, // Select all text on focus. It is false by default. 
				},
			],
			on_remove_row: function(rownum) {
				validateCells();
			},
			on_edit_cell: function(rownum, colnum, value) {
				validateCells();
			},
		});
		// enable feature to add rows
		$('#add').click(function () {
			// add a row
			tablesJs.add(ctx);
			// set focus on the first cell or the last row
			tablesJs.focus(ctx, tablesJs.count(ctx)-1, 0);
			// validate
			validateCells();
			// scroll to the bottom
			$('html, body').animate({scrollTop:$(document).height()}, 'slow');
		});
		// set focus
		tablesJs.focus(ctx, 0, 0);
	});
</script>